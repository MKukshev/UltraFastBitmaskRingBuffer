package com.ultrafast.pool.examples;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;

import com.ultrafast.pool.BitmaskRingBufferUltraVarHandleAutoExpand;
import com.ultrafast.pool.smart.SmartTaskPool;
import com.ultrafast.pool.task.AutoReturnSimpleTask;

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SmartTaskPool –ø–æ—Å–ª–µ —Ä–µ–¥–∏–∑–∞–π–Ω–∞.
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞:
 * - –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π API –±–µ–∑ boilerplate –∫–æ–¥–∞
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Future
 * - Fluent API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * - Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞
 * - –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á
 */
public class ComprehensiveSmartTaskPoolExample {
    
    private static final AtomicInteger taskCounter = new AtomicInteger(0);
    
    public static void main(String[] args) {
        System.out.println("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä SmartTaskPool –ø–æ—Å–ª–µ —Ä–µ–¥–∏–∑–∞–π–Ω–∞");
        System.out.println("=" .repeat(80));
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –∑–∞–¥–∞—á
        BitmaskRingBufferUltraVarHandleAutoExpand.ObjectFactory<AutoReturnSimpleTask> factory = 
            () -> new AutoReturnSimpleTask();
        
        // –°–æ–∑–¥–∞–µ–º –ø—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        BitmaskRingBufferUltraVarHandleAutoExpand<AutoReturnSimpleTask> pool = 
            new BitmaskRingBufferUltraVarHandleAutoExpand<>(5, factory, 0.5, 200); // 50% —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –º–∞–∫—Å 200%
        
        // –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ø—É–ª –∑–∞–¥–∞—á
        SmartTaskPool<AutoReturnSimpleTask> smartPool = new SmartTaskPool<>(
            pool,
            Executors.newFixedThreadPool(4)
        );
        
        try {
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            demonstrateSimpleUsage(smartPool);
            demonstrateFluentAPI(smartPool);
            demonstrateBatchProcessing(smartPool);
            demonstrateTaskManagement(smartPool);
            demonstrateErrorHandling(smartPool);
            demonstrateMonitoring(smartPool);
            demonstratePerformanceComparison(smartPool);
            
        } finally {
            // –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            System.out.println("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã SmartTaskPool...");
            smartPool.shutdown();
            
            try {
                if (smartPool.awaitTermination(5, TimeUnit.SECONDS)) {
                    System.out.println("‚úÖ SmartTaskPool —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
                } else {
                    System.out.println("‚ö†Ô∏è SmartTaskPool –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
                    smartPool.shutdownNow();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                smartPool.shutdownNow();
            }
        }
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞, –º–∞–∫—Å–∏–º—É–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
     */
    private static void demonstrateSimpleUsage(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ");
        System.out.println("-".repeat(50));
        
        // –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–º–Ω–æ–≥–æ boilerplate –∫–æ–¥–∞)
        System.out.println("‚ùå –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–º–Ω–æ–≥–æ –∫–æ–¥–∞):");
        System.out.println("   - –†—É—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—É–ª–∞");
        System.out.println("   - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Future");
        System.out.println("   - –†—É—á–Ω–æ–π –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ –ø—É–ª");
        System.out.println("   - –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π");
        
        // SmartTaskPool –ø–æ–¥—Ö–æ–¥ (—ç–ª–µ–≥–∞–Ω—Ç–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ)
        System.out.println("\n‚úÖ SmartTaskPool –ø–æ–¥—Ö–æ–¥ (—ç–ª–µ–≥–∞–Ω—Ç–Ω–æ):");
        
        // –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ - –í–°–ï–ì–û 1 –°–¢–†–û–ö–ê!
        Future<?> future = smartPool.submit(task -> {
            task.setData("–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ " + taskCounter.incrementAndGet());
            task.execute();
            return null;
        });
        
        try {
            future.get(2, TimeUnit.SECONDS);
            System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        } catch (Exception e) {
            System.out.println("   ‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏, Future –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: Fluent API - —á–∏—Ç–∞–µ–º—ã–π –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∫–æ–¥
     */
    private static void demonstrateFluentAPI(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: Fluent API");
        System.out.println("-".repeat(50));
        
        System.out.println("üé® Fluent API - —á–∏—Ç–∞–µ–º—ã–π –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∫–æ–¥:");
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ fluent API
        Future<?> future = smartPool.submit()
            .withTimeout(Duration.ofSeconds(5))           // –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            .autoCancelOnError()                          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            .withName("FluentTask")                       // –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            .preProcess(task -> {                         // Pre-processing
                System.out.println("   üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏...");
                task.setData("Fluent API –∑–∞–¥–∞—á–∞");
                task.setLoggingEnabled(true);
            })
            .postProcess(task -> {                        // Post-processing
                System.out.println("   üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...");
                task.resetStatistics();
            })
            .retryOnFailure(3)                           // Retry –ª–æ–≥–∏–∫–∞
            .execute(task -> {                           // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                System.out.println("   ‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: " + task.getTaskName());
                task.execute();
                return null;
            });
        
        try {
            future.get(3, TimeUnit.SECONDS);
            System.out.println("   ‚úÖ Fluent –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        } catch (Exception e) {
            System.out.println("   ‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ß–∏—Ç–∞–µ–º—ã–π –∫–æ–¥ —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ–≤–µ–¥–µ–Ω–∏—è!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
     */
    private static void demonstrateBatchProcessing(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞");
        System.out.println("-".repeat(50));
        
        System.out.println("üì¶ Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:");
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        List<Function<AutoReturnSimpleTask, ?>> tasks = Arrays.asList(
            task -> {
                task.setData("Batch –∑–∞–¥–∞—á–∞ 1");
                task.execute();
                return null;
            },
            task -> {
                task.setData("Batch –∑–∞–¥–∞—á–∞ 2");
                task.execute();
                return null;
            },
            task -> {
                task.setData("Batch –∑–∞–¥–∞—á–∞ 3");
                task.execute();
                return null;
            },
            task -> {
                task.setData("Batch –∑–∞–¥–∞—á–∞ 4");
                task.execute();
                return null;
            }
        );
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ - –í–°–ï–ì–û 1 –°–¢–†–û–ö–ê!
        List<Future<?>> futures = smartPool.submitAll(tasks);
        
        System.out.println("   üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: " + futures.size());
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for (int i = 0; i < futures.size(); i++) {
            try {
                Object result = futures.get(i).get(2, TimeUnit.SECONDS);
                System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ " + (i + 1) + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " + result);
            } catch (Exception e) {
                System.out.println("   ‚ùå –ó–∞–¥–∞—á–∞ " + (i + 1) + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
            }
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
     */
    private static void demonstrateTaskManagement(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏");
        System.out.println("-".repeat(50));
        
        System.out.println("üéÆ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:");
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ task.cancelTask()
        System.out.println("   üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã —á–µ—Ä–µ–∑ task.cancelTask():");
        Future<?> selfCancellingFuture = smartPool.submit(task -> {
            task.setData("–°–∞–º–æ–æ—Ç–º–µ–Ω—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞");
            task.setLoggingEnabled(true);
            
            try {
                Thread.sleep(1000); // –†–∞–±–æ—Ç–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É
                System.out.println("   üîÑ –ó–∞–¥–∞—á–∞ —Ä–µ—à–∞–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–µ–±—è...");
                task.cancelTask(); // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏–∑–Ω—É—Ç—Ä–∏
                System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑–Ω—É—Ç—Ä–∏");
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            
            return null;
        });
        
        try {
            Thread.sleep(1500); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∞–º–æ–æ—Ç–º–µ–Ω—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–≥–∏—Ö –∑–∞–¥–∞—á
        Future<?> future1 = smartPool.submit(task -> {
            task.setData("–î–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ 1");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            task.execute();
            return null;
        });
        
        Future<?> future2 = smartPool.submit(task -> {
            task.setData("–î–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ 2");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            task.execute();
            return null;
        });
        
        Future<?> future3 = smartPool.submit(task -> {
            task.setData("–î–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ 3");
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            task.execute();
            return null;
        });
        
        try {
            Thread.sleep(500); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
            
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            System.out.println("   üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: " + smartPool.getActiveTaskIds());
            
            // –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Future
            boolean cancelled1 = future1.cancel(true);
            System.out.println("   üö´ –ó–∞–¥–∞—á–∞ 1 –æ—Ç–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Future: " + cancelled1);
            
            // –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ SmartTaskPool.cancelTask() (–ø–æ ID)
            if (!smartPool.getActiveTaskIds().isEmpty()) {
                String taskId = smartPool.getActiveTaskIds().iterator().next();
                System.out.println("   üö´ –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å ID: " + taskId);
                smartPool.cancelTask(taskId);
            }
            
            // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            smartPool.cancelAllTasks();
            System.out.println("   üö´ –í—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã");
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            System.out.println("   üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: " + smartPool.getActiveTaskIds());
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞
     */
    private static void demonstrateErrorHandling(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫");
        System.out.println("-".repeat(50));
        
        System.out.println("üõ°Ô∏è –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞:");
        
        // –ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π
        Future<?> future = smartPool.submit()
            .withTimeout(Duration.ofSeconds(10))
            .retryOnFailure(3)  // 3 –ø–æ–ø—ã—Ç–∫–∏
            .withName("ErrorHandlingTask")
            .execute(task -> {
                task.setData("–ó–∞–¥–∞—á–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫");
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ—à–∏–±–∫—É
                if (Math.random() < 0.7) {
                    throw new RuntimeException("–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞");
                }
                
                task.execute();
                return null;
            });
        
        try {
            Object result = future.get(5, TimeUnit.SECONDS);
            System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: " + result);
        } catch (Exception e) {
            System.out.println("   ‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π –ø–æ—Å–ª–µ retry: " + e.getMessage());
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å retry –ª–æ–≥–∏–∫–æ–π!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 6: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    private static void demonstrateMonitoring(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 6: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        System.out.println("-".repeat(50));
        
        System.out.println("üìä –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for (int i = 0; i < 10; i++) {
            final int taskNum = i;
            smartPool.submit(task -> {
                task.setData("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ " + taskNum);
                task.execute();
                return null;
            });
        }
        
        // –û—Ç–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
        try {
            Thread.sleep(100);
            smartPool.cancelAllTasks();
            Thread.sleep(100);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        SmartTaskPool.TaskPoolStatistics stats = smartPool.getStatistics();
        
        System.out.println("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SmartTaskPool:");
        System.out.println("      ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: " + stats.getTotalTasks());
        System.out.println("      ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: " + stats.getActiveTasks());
        System.out.println("      ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: " + stats.getCompletedTasks());
        System.out.println("      ‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: " + stats.getCancelledTasks());
        System.out.println("      ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: " + stats.getFailedTasks());
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–ª–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 7: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private static void demonstratePerformanceComparison(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 7: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
        System.out.println("-".repeat(50));
        
        System.out.println("‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥–æ–≤:");
        
        int taskCount = 1000;
        
        // –¢–µ—Å—Ç SmartTaskPool
        long startTime = System.currentTimeMillis();
        
        List<Function<AutoReturnSimpleTask, ?>> tasks = new ArrayList<>();
        for (int i = 0; i < taskCount; i++) {
            tasks.add(task -> {
                task.setData("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞");
                task.execute();
                return null;
            });
        }
        List<Future<?>> futures = smartPool.submitAll(tasks);
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for (Future<?> future : futures) {
            try {
                future.get(1, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            }
        }
        
        long smartPoolTime = System.currentTimeMillis() - startTime;
        
        System.out.println("   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
        System.out.println("      ‚Ä¢ SmartTaskPool: " + smartPoolTime + "ms –¥–ª—è " + taskCount + " –∑–∞–¥–∞—á");
        System.out.println("      ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: " + (smartPoolTime / (double) taskCount) + "ms");
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏!");
    }
} 