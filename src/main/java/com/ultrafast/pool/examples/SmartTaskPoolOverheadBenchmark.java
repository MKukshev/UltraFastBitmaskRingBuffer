package com.ultrafast.pool.examples;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

import com.ultrafast.pool.BitmaskRingBufferUltraVarHandleAutoExpand;
import com.ultrafast.pool.smart.SmartTaskPool;
import com.ultrafast.pool.task.AutoReturnSimpleTask;

/**
 * –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–≤–µ—Ä—Ö–µ–¥–∞ SmartTaskPool –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä—è–º—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞ –∏ –∑–∞–¥–∞—á.
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç:
 * 1. –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ + ExecutorService
 * 2. SmartTaskPool —Å –±–∞–∑–æ–≤—ã–º API
 * 3. SmartTaskPool —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º API (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
 * 4. SmartTaskPool —Å Fluent API
 */
public class SmartTaskPoolOverheadBenchmark {
    
    private static final int WARMUP_ITERATIONS = 100;
    private static final int BENCHMARK_ITERATIONS = 1000;
    private static final int THREAD_POOL_SIZE = 4;
    
    public static void main(String[] args) {
        System.out.println("üöÄ –ë–µ–Ω—á–º–∞—Ä–∫ –æ–≤–µ—Ä—Ö–µ–¥–∞ SmartTaskPool");
        System.out.println("=" .repeat(80));
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –∑–∞–¥–∞—á
        BitmaskRingBufferUltraVarHandleAutoExpand.ObjectFactory<AutoReturnSimpleTask> factory = 
            () -> new AutoReturnSimpleTask();
        
        // –°–æ–∑–¥–∞–µ–º –ø—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        BitmaskRingBufferUltraVarHandleAutoExpand<AutoReturnSimpleTask> pool = 
            new BitmaskRingBufferUltraVarHandleAutoExpand<>(100, factory, 0.5, 1000);
        
        // –°–æ–∑–¥–∞–µ–º ExecutorService –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        ExecutorService directExecutor = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
        
        // –°–æ–∑–¥–∞–µ–º SmartTaskPool
        SmartTaskPool<AutoReturnSimpleTask> smartPool = new SmartTaskPool<>(
            pool,
            Executors.newFixedThreadPool(THREAD_POOL_SIZE)
        );
        
        try {
            // –ü—Ä–æ–≥—Ä–µ–≤
            System.out.println("üî• –ü—Ä–æ–≥—Ä–µ–≤ —Å–∏—Å—Ç–µ–º—ã...");
            warmup(directExecutor, smartPool, pool);
            
            // –ë–µ–Ω—á–º–∞—Ä–∫–∏
            System.out.println("\nüìä –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤...");
            
            // –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ + ExecutorService
            benchmarkDirectUsage(directExecutor, pool);
            
            // –¢–µ—Å—Ç 2: SmartTaskPool —Å –±–∞–∑–æ–≤—ã–º API
            benchmarkSmartTaskPoolBasic(smartPool);
            
            // –¢–µ—Å—Ç 3: SmartTaskPool —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º API
            benchmarkSmartTaskPoolExtended(smartPool);
            
            // –¢–µ—Å—Ç 4: SmartTaskPool —Å Fluent API
            benchmarkSmartTaskPoolFluent(smartPool);
            
            // –¢–µ—Å—Ç 5: Batch –æ–ø–µ—Ä–∞—Ü–∏–∏
            benchmarkBatchOperations(directExecutor, smartPool, pool);
            
            // –¢–µ—Å—Ç 6: –î–æ–ª–≥–∏–µ –∑–∞–¥–∞—á–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
            // benchmarkLongRunningTasks(directExecutor, smartPool, pool);
            
        } finally {
            // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            System.out.println("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
            directExecutor.shutdown();
            smartPool.shutdown();
            
            try {
                directExecutor.awaitTermination(5, TimeUnit.SECONDS);
                smartPool.awaitTermination(5, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≥—Ä–µ–≤ —Å–∏—Å—Ç–µ–º—ã
     */
    private static void warmup(ExecutorService directExecutor, SmartTaskPool<AutoReturnSimpleTask> smartPool, 
                              BitmaskRingBufferUltraVarHandleAutoExpand<AutoReturnSimpleTask> pool) {
        for (int i = 0; i < WARMUP_ITERATIONS; i++) {
            final int warmupIndex = i;
            // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            AutoReturnSimpleTask task1 = pool.getFreeObject();
            task1.setData("Warmup " + warmupIndex);
            Future<?> future1 = directExecutor.submit(() -> {
                task1.execute();
                return null;
            });
            try {
                future1.get(1, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
            } finally {
                pool.setFreeObject(task1);
            }
            
            // SmartTaskPool
            smartPool.submit(task -> {
                task.setData("Warmup " + warmupIndex);
                task.execute();
                return null;
            });
        }
    }
    
    /**
     * –ë–µ–Ω—á–º–∞—Ä–∫ 1: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ + ExecutorService
     */
    private static void benchmarkDirectUsage(ExecutorService executor, 
                                           BitmaskRingBufferUltraVarHandleAutoExpand<AutoReturnSimpleTask> pool) {
        System.out.println("\nüìã –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ + ExecutorService");
        System.out.println("-".repeat(50));
        
        long startTime = System.nanoTime();
        List<Future<?>> futures = new ArrayList<>();
        
        for (int i = 0; i < BENCHMARK_ITERATIONS; i++) {
            final AutoReturnSimpleTask task = pool.getFreeObject();
            if (task == null) {
                System.out.println("   ‚ö†Ô∏è –ü—É–ª –∏—Å—á–µ—Ä–ø–∞–Ω –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + i);
                break;
            }
            task.setData("Direct " + i);
            
            Future<?> future = executor.submit(() -> {
                try {
                    task.execute();
                    return null;
                } finally {
                    pool.setFreeObject(task);
                }
            });
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for (Future<?> future : futures) {
            try {
                future.get(5, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1_000_000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        System.out.println("   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + "ms");
        System.out.println("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: " + (duration / (double)BENCHMARK_ITERATIONS) + "ms");
        System.out.println("   üéØ –ó–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É: " + (BENCHMARK_ITERATIONS * 1000 / duration));
    }
    
    /**
     * –ë–µ–Ω—á–º–∞—Ä–∫ 2: SmartTaskPool —Å –±–∞–∑–æ–≤—ã–º API
     */
    private static void benchmarkSmartTaskPoolBasic(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –¢–µ—Å—Ç 2: SmartTaskPool —Å –±–∞–∑–æ–≤—ã–º API");
        System.out.println("-".repeat(50));
        
        long startTime = System.nanoTime();
        List<Future<?>> futures = new ArrayList<>();
        
        for (int i = 0; i < BENCHMARK_ITERATIONS; i++) {
            final int taskIndex = i;
            Future<?> future = smartPool.submit(task -> {
                task.setData("SmartBasic " + taskIndex);
                task.execute();
                return null;
            });
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for (Future<?> future : futures) {
            try {
                future.get(5, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1_000_000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        System.out.println("   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + "ms");
        System.out.println("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: " + (duration / (double)BENCHMARK_ITERATIONS) + "ms");
        System.out.println("   üéØ –ó–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É: " + (BENCHMARK_ITERATIONS * 1000 / duration));
    }
    
    /**
     * –ë–µ–Ω—á–º–∞—Ä–∫ 3: SmartTaskPool —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º API
     */
    private static void benchmarkSmartTaskPoolExtended(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –¢–µ—Å—Ç 3: SmartTaskPool —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º API (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)");
        System.out.println("-".repeat(50));
        
        long startTime = System.nanoTime();
        List<Future<?>> futures = new ArrayList<>();
        
        for (int i = 0; i < BENCHMARK_ITERATIONS; i++) {
            final int taskIndex = i;
            SmartTaskPool.TaskConfig config = new SmartTaskPool.TaskConfig()
                .withTimeout(Duration.ofSeconds(10))
                .withName("ExtendedTask_" + taskIndex);
            
            Future<?> future = smartPool.submit(config, task -> {
                task.setData("SmartExtended " + taskIndex);
                task.execute();
                return null;
            });
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for (Future<?> future : futures) {
            try {
                future.get(5, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1_000_000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        System.out.println("   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + "ms");
        System.out.println("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: " + (duration / (double)BENCHMARK_ITERATIONS) + "ms");
        System.out.println("   üéØ –ó–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É: " + (BENCHMARK_ITERATIONS * 1000 / duration));
    }
    
    /**
     * –ë–µ–Ω—á–º–∞—Ä–∫ 4: SmartTaskPool —Å Fluent API
     */
    private static void benchmarkSmartTaskPoolFluent(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –¢–µ—Å—Ç 4: SmartTaskPool —Å Fluent API");
        System.out.println("-".repeat(50));
        
        long startTime = System.nanoTime();
        List<Future<?>> futures = new ArrayList<>();
        
        for (int i = 0; i < BENCHMARK_ITERATIONS; i++) {
            final int taskIndex = i;
            Future<?> future = smartPool.submit()
                .withTimeout(Duration.ofSeconds(10))
                .withName("FluentTask_" + taskIndex)
                .execute(task -> {
                    task.setData("SmartFluent " + taskIndex);
                    task.execute();
                    return null;
                });
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for (Future<?> future : futures) {
            try {
                future.get(5, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1_000_000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        System.out.println("   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + duration + "ms");
        System.out.println("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: " + (duration / (double)BENCHMARK_ITERATIONS) + "ms");
        System.out.println("   üéØ –ó–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É: " + (BENCHMARK_ITERATIONS * 1000 / duration));
    }
    
    /**
     * –ë–µ–Ω—á–º–∞—Ä–∫ 5: Batch –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    private static void benchmarkBatchOperations(ExecutorService executor, 
                                               SmartTaskPool<AutoReturnSimpleTask> smartPool,
                                               BitmaskRingBufferUltraVarHandleAutoExpand<AutoReturnSimpleTask> pool) {
        System.out.println("\nüìã –¢–µ—Å—Ç 5: Batch –æ–ø–µ—Ä–∞—Ü–∏–∏");
        System.out.println("-".repeat(50));
        
        int batchSize = 100;
        int batches = BENCHMARK_ITERATIONS / batchSize;
        
        // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        long startTime = System.nanoTime();
        for (int batch = 0; batch < batches; batch++) {
            final int batchIndex = batch;
            List<Future<?>> futures = new ArrayList<>();
            for (int i = 0; i < batchSize; i++) {
                final AutoReturnSimpleTask task = pool.getFreeObject();
                final int taskIndex = i;
                task.setData("BatchDirect_" + batchIndex + "_" + taskIndex);
                
                Future<?> future = executor.submit(() -> {
                    try {
                        task.execute();
                        return null;
                    } finally {
                        pool.setFreeObject(task);
                    }
                });
                futures.add(future);
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è batch
            for (Future<?> future : futures) {
                try {
                    future.get(5, TimeUnit.SECONDS);
                } catch (Exception e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }
        }
        long endTime = System.nanoTime();
        long directDuration = (endTime - startTime) / 1_000_000;
        
        // SmartTaskPool
        startTime = System.nanoTime();
        for (int batch = 0; batch < batches; batch++) {
            final int batchIndex = batch;
            List<Function<AutoReturnSimpleTask, ?>> tasks = new ArrayList<>();
            for (int i = 0; i < batchSize; i++) {
                final int taskIndex = i;
                tasks.add(task -> {
                    task.setData("BatchSmart_" + batchIndex + "_" + taskIndex);
                    task.execute();
                    return null;
                });
            }
            
            List<Future<?>> futures = smartPool.submitAll(tasks);
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è batch
            for (Future<?> future : futures) {
                try {
                    future.get(5, TimeUnit.SECONDS);
                } catch (Exception e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            }
        }
        endTime = System.nanoTime();
        long smartDuration = (endTime - startTime) / 1_000_000;
        
        System.out.println("   üìä –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " + directDuration + "ms");
        System.out.println("   üìä SmartTaskPool: " + smartDuration + "ms");
        System.out.println("   üìà –û–≤–µ—Ä—Ö–µ–¥: " + String.format("%.2f", (smartDuration - directDuration) / (double)directDuration * 100) + "%");
    }
    
    /**
     * –ë–µ–Ω—á–º–∞—Ä–∫ 6: –î–æ–ª–≥–∏–µ –∑–∞–¥–∞—á–∏
     */
    private static void benchmarkLongRunningTasks(ExecutorService executor, 
                                                SmartTaskPool<AutoReturnSimpleTask> smartPool,
                                                BitmaskRingBufferUltraVarHandleAutoExpand<AutoReturnSimpleTask> pool) {
        System.out.println("\nüìã –¢–µ—Å—Ç 6: –î–æ–ª–≥–∏–µ –∑–∞–¥–∞—á–∏ (—Å —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π)");
        System.out.println("-".repeat(50));
        
        int iterations = BENCHMARK_ITERATIONS / 10; // –ú–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–æ–ª–≥–∏—Ö –∑–∞–¥–∞—á
        
        // –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        long startTime = System.nanoTime();
        List<Future<?>> futures = new ArrayList<>();
        
        for (int i = 0; i < iterations; i++) {
            final AutoReturnSimpleTask task = pool.getFreeObject();
            final int taskIndex = i;
            task.setData("LongDirect " + taskIndex);
            task.setLongRunningTask(true);
            
            Future<?> future = executor.submit(() -> {
                try {
                    task.execute();
                    return null;
                } finally {
                    pool.setFreeObject(task);
                }
            });
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for (Future<?> future : futures) {
            try {
                future.get(10, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        long endTime = System.nanoTime();
        long directDuration = (endTime - startTime) / 1_000_000;
        
        // SmartTaskPool
        startTime = System.nanoTime();
        futures.clear();
        
        for (int i = 0; i < iterations; i++) {
            final int taskIndex = i;
            Future<?> future = smartPool.submit(task -> {
                task.setData("LongSmart " + taskIndex);
                task.setLongRunningTask(true);
                task.execute();
                return null;
            });
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for (Future<?> future : futures) {
            try {
                future.get(10, TimeUnit.SECONDS);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }
        
        endTime = System.nanoTime();
        long smartDuration = (endTime - startTime) / 1_000_000;
        
        System.out.println("   üìä –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " + directDuration + "ms");
        System.out.println("   üìä SmartTaskPool: " + smartDuration + "ms");
        System.out.println("   üìà –û–≤–µ—Ä—Ö–µ–¥: " + String.format("%.2f", (smartDuration - directDuration) / (double)directDuration * 100) + "%");
    }
} 