package com.ultrafast.pool.examples;

import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;

import com.ultrafast.pool.BitmaskRingBufferUltraVarHandleAutoExpand;
import com.ultrafast.pool.smart.SmartTaskPool;
import com.ultrafast.pool.task.AutoReturnSimpleTask;

/**
 * –ü—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á –≤ SmartTaskPool.
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
 * - –û—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ task.cancelTask() (–∏–∑–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏)
 * - –û—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ Future.cancel() (–∏–∑–≤–Ω–µ)
 * - –û—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ SmartTaskPool.cancelTask() (–ø–æ ID)
 * - –û—Ç–º–µ–Ω—É —á–µ—Ä–µ–∑ SmartTaskPool.cancelAllTasks() (–≤—Å–µ –∑–∞–¥–∞—á–∏)
 * - –û—Ç–º–µ–Ω—É –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
 */
public class TaskCancellationExample {
    
    private static final AtomicInteger taskCounter = new AtomicInteger(0);
    
    public static void main(String[] args) {
        System.out.println("üöÄ –ü—Ä–∏–º–µ—Ä –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á –≤ SmartTaskPool");
        System.out.println("=" .repeat(80));
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –∑–∞–¥–∞—á
        BitmaskRingBufferUltraVarHandleAutoExpand.ObjectFactory<AutoReturnSimpleTask> factory = 
            () -> new AutoReturnSimpleTask();
        
        // –°–æ–∑–¥–∞–µ–º –ø—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        BitmaskRingBufferUltraVarHandleAutoExpand<AutoReturnSimpleTask> pool = 
            new BitmaskRingBufferUltraVarHandleAutoExpand<>(5, factory, 0.5, 200);
        
        // –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ø—É–ª –∑–∞–¥–∞—á
        SmartTaskPool<AutoReturnSimpleTask> smartPool = new SmartTaskPool<>(
            pool,
            Executors.newFixedThreadPool(4)
        );
        
        try {
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–º–µ–Ω—ã
            demonstrateTaskSelfCancellation(smartPool);
            demonstrateFutureCancellation(smartPool);
            demonstrateSmartPoolCancellation(smartPool);
            demonstrateLongRunningTaskCancellation(smartPool);
            demonstrateBatchCancellation(smartPool);
            
        } finally {
            // –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            System.out.println("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã SmartTaskPool...");
            smartPool.shutdown();
            
            try {
                if (smartPool.awaitTermination(5, TimeUnit.SECONDS)) {
                    System.out.println("‚úÖ SmartTaskPool —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
                } else {
                    System.out.println("‚ö†Ô∏è SmartTaskPool –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
                    smartPool.shutdownNow();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                smartPool.shutdownNow();
            }
        }
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –∏–∑–Ω—É—Ç—Ä–∏ —á–µ—Ä–µ–∑ task.cancelTask()
     */
    private static void demonstrateTaskSelfCancellation(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –∏–∑–Ω—É—Ç—Ä–∏");
        System.out.println("-".repeat(50));
        
        System.out.println("üéØ –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ task.cancelTask() (–∏–∑–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏):");
        
        // –ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç —Å–∞–º–∞ —Å–µ–±—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        Future<?> future = smartPool.submit(task -> {
            task.setData("–°–∞–º–æ–æ—Ç–º–µ–Ω—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ " + taskCounter.incrementAndGet());
            task.setLoggingEnabled(true);
            
            // –†–∞–±–æ—Ç–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –∑–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º —Å–µ–±—è
            try {
                Thread.sleep(1000); // –†–∞–±–æ—Ç–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É
                System.out.println("   üîÑ –ó–∞–¥–∞—á–∞ —Ä–µ—à–∞–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–µ–±—è...");
                task.cancelTask(); // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏–∑–Ω—É—Ç—Ä–∏
                System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑–Ω—É—Ç—Ä–∏");
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            
            return null;
        });
        
        try {
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            future.get(3, TimeUnit.SECONDS);
        } catch (TimeoutException e) {
            System.out.println("   ‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
        } catch (Exception e) {
            System.out.println("   ‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑–Ω—É—Ç—Ä–∏!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Future.cancel()
     */
    private static void demonstrateFutureCancellation(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ Future");
        System.out.println("-".repeat(50));
        
        System.out.println("üéØ –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Future.cancel() (–∏–∑–≤–Ω–µ):");
        
        // –ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–≥–æ
        Future<?> future = smartPool.submit(task -> {
            task.setData("–î–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è Future –æ—Ç–º–µ–Ω—ã " + taskCounter.incrementAndGet());
            task.setLoggingEnabled(true);
            
            // –î–æ–ª–≥–∞—è —Ä–∞–±–æ—Ç–∞
            try {
                System.out.println("   üîÑ –ó–∞–¥–∞—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–ª–≥—É—é —Ä–∞–±–æ—Ç—É...");
                Thread.sleep(5000); // 5 —Å–µ–∫—É–Ω–¥ —Ä–∞–±–æ—Ç—ã
                System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É");
            } catch (InterruptedException e) {
                System.out.println("   üö´ –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
                Thread.currentThread().interrupt();
            }
            
            return null;
        });
        
        try {
            // –î–∞–µ–º –∑–∞–¥–∞—á–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º
            Thread.sleep(1000);
            System.out.println("   üö´ –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Future.cancel()...");
            boolean cancelled = future.cancel(true);
            System.out.println("   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã: " + cancelled);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            System.out.println("   üìä –°—Ç–∞—Ç—É—Å Future:");
            System.out.println("      ‚Ä¢ isCancelled: " + future.isCancelled());
            System.out.println("      ‚Ä¢ isDone: " + future.isDone());
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Future!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ SmartTaskPool.cancelTask()
     */
    private static void demonstrateSmartPoolCancellation(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ SmartTaskPool");
        System.out.println("-".repeat(50));
        
        System.out.println("üéØ –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ SmartTaskPool.cancelTask() (–ø–æ ID):");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
        Future<?> future1 = smartPool.submit(task -> {
            task.setData("–ó–∞–¥–∞—á–∞ 1 –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ ID " + taskCounter.incrementAndGet());
            task.setLoggingEnabled(true);
            
            try {
                System.out.println("   üîÑ –ó–∞–¥–∞—á–∞ 1 –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...");
                Thread.sleep(3000);
                System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ 1 –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É");
            } catch (InterruptedException e) {
                System.out.println("   üö´ –ó–∞–¥–∞—á–∞ 1 –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
                Thread.currentThread().interrupt();
            }
            
            return null;
        });
        
        Future<?> future2 = smartPool.submit(task -> {
            task.setData("–ó–∞–¥–∞—á–∞ 2 –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ ID " + taskCounter.incrementAndGet());
            task.setLoggingEnabled(true);
            
            try {
                System.out.println("   üîÑ –ó–∞–¥–∞—á–∞ 2 –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...");
                Thread.sleep(3000);
                System.out.println("   ‚úÖ –ó–∞–¥–∞—á–∞ 2 –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É");
            } catch (InterruptedException e) {
                System.out.println("   üö´ –ó–∞–¥–∞—á–∞ 2 –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
                Thread.currentThread().interrupt();
            }
            
            return null;
        });
        
        try {
            Thread.sleep(500);
            
            // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            System.out.println("   üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: " + smartPool.getActiveTaskIds());
            
            // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ ID
            String taskId = smartPool.getActiveTaskIds().iterator().next();
            System.out.println("   üö´ –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å ID: " + taskId);
            smartPool.cancelTask(taskId);
            
            Thread.sleep(500);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            System.out.println("   üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: " + smartPool.getActiveTaskIds());
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ SmartTaskPool!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –û—Ç–º–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
     */
    private static void demonstrateLongRunningTaskCancellation(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –û—Ç–º–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á");
        System.out.println("-".repeat(50));
        
        System.out.println("üéØ –û—Ç–º–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã:");
        
        // –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã
        Future<?> future = smartPool.submit(task -> {
            task.setData("–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ " + taskCounter.incrementAndGet());
            task.setLoggingEnabled(true);
            task.setLongRunningTask(true); // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
            task.setCancellationCheckInterval(200); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∫–∞–∂–¥—ã–µ 200–º—Å
            
            task.execute(); // –í—ã–ø–æ–ª–Ω—è–µ–º —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã
            
            return null;
        });
        
        try {
            // –î–∞–µ–º –∑–∞–¥–∞—á–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –∑–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º
            Thread.sleep(2000);
            System.out.println("   üö´ –û—Ç–º–µ–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É...");
            boolean cancelled = future.cancel(true);
            System.out.println("   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã: " + cancelled);
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            Thread.sleep(500);
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏!");
    }
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: Batch –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
     */
    private static void demonstrateBatchCancellation(SmartTaskPool<AutoReturnSimpleTask> smartPool) {
        System.out.println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: Batch –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á");
        System.out.println("-".repeat(50));
        
        System.out.println("üéØ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ SmartTaskPool.cancelAllTasks():");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
        for (int i = 0; i < 5; i++) {
            final int taskNum = i + 1;
            smartPool.submit(task -> {
                task.setData("Batch –∑–∞–¥–∞—á–∞ " + taskNum + " " + taskCounter.incrementAndGet());
                task.setLoggingEnabled(true);
                
                try {
                    System.out.println("   üîÑ Batch –∑–∞–¥–∞—á–∞ " + taskNum + " –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...");
                    Thread.sleep(2000 + (long)(Math.random() * 1000)); // 2-3 —Å–µ–∫—É–Ω–¥—ã
                    System.out.println("   ‚úÖ Batch –∑–∞–¥–∞—á–∞ " + taskNum + " –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É");
                } catch (InterruptedException e) {
                    System.out.println("   üö´ Batch –∑–∞–¥–∞—á–∞ " + taskNum + " –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞");
                    Thread.currentThread().interrupt();
                }
                
                return null;
            });
        }
        
        try {
            Thread.sleep(1000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            System.out.println("   üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π: " + smartPool.getActiveTaskIds());
            System.out.println("   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: " + smartPool.getActiveTaskIds().size());
            
            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            System.out.println("   üö´ –û—Ç–º–µ–Ω—è–µ–º –í–°–ï –∑–∞–¥–∞—á–∏...");
            smartPool.cancelAllTasks();
            
            Thread.sleep(500);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            System.out.println("   üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: " + smartPool.getActiveTaskIds());
            System.out.println("   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: " + smartPool.getActiveTaskIds().size());
            
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        System.out.println("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ batch –æ–ø–µ—Ä–∞—Ü–∏—é!");
    }
} 