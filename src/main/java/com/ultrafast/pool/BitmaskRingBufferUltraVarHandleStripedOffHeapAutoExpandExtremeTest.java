package com.ultrafast.pool;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—É–ª–∞ —á–µ—Ä–µ–∑ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
public class BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpandExtremeTest {
    
    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    static class TestObject {
        private final int id;
        private final long creationTime;
        
        public TestObject(int id) {
            this.id = id;
            this.creationTime = System.nanoTime();
        }
        
        public int getId() {
            return id;
        }
        
        public long getCreationTime() {
            return creationTime;
        }
        
        @Override
        public String toString() {
            return "TestObject{id=" + id + ", creationTime=" + creationTime + "}";
        }
    }
    
    public static void main(String[] args) throws InterruptedException {
        System.out.println("=== –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ Auto-Expanding Pool ===");
        
        // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π –µ–º–∫–æ—Å—Ç—å—é
        int initialCapacity = 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª
        AtomicInteger objectCounter = new AtomicInteger(0);
        
        BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand<TestObject> pool = 
            new BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand<>(
                initialCapacity, 
                () -> new TestObject(objectCounter.incrementAndGet())
            );
        
        System.out.println("–ù–∞—á–∞–ª—å–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –ø—É–ª–∞: " + pool.getInitialCapacity());
        System.out.println("–¢–µ–∫—É—â–∞—è –µ–º–∫–æ—Å—Ç—å –ø—É–ª–∞: " + pool.getCapacity());
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
        int threadCount = 5; // –ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤, —á–µ–º –æ–±—ä–µ–∫—Ç–æ–≤
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        CountDownLatch startLatch = new CountDownLatch(1);
        CountDownLatch endLatch = new CountDownLatch(threadCount);
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        AtomicLong totalObjectsCreated = new AtomicLong(0);
        AtomicLong totalObjectsReturned = new AtomicLong(0);
        
        System.out.println("\n–ó–∞–ø—É—Å–∫–∞–µ–º " + threadCount + " –ø–æ—Ç–æ–∫–æ–≤ (–±–æ–ª—å—à–µ —á–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—É–ª–µ: " + initialCapacity + ")");
        System.out.println("–ü–æ—Ç–æ–∫–∏ –±—É–¥—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã...");
        
        long startTime = System.currentTimeMillis();
        
        for (int i = 0; i < threadCount; i++) {
            final int threadId = i;
            executor.submit(() -> {
                try {
                    // –ñ–¥–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
                    startLatch.await();
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞
                    TestObject obj = pool.getFreeObject();
                    
                    if (obj != null) {
                        totalObjectsCreated.incrementAndGet();
                        System.out.println("üî• –ü–æ—Ç–æ–∫ " + threadId + " –ø–æ–ª—É—á–∏–ª –æ–±—ä–µ–∫—Ç: " + obj.getId() + " (—Å–æ–∑–¥–∞–Ω –≤ " + obj.getCreationTime() + ")");
                        
                        // –î–µ—Ä–∂–∏–º –æ–±—ä–µ–∫—Ç –¥–æ–ª—å—à–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é
                        Thread.sleep(200);
                        
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø—É–ª
                        pool.setFreeObject(obj);
                        totalObjectsReturned.incrementAndGet();
                        System.out.println("‚úÖ –ü–æ—Ç–æ–∫ " + threadId + " –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç: " + obj.getId());
                    } else {
                        System.err.println("‚ùå –ü–æ—Ç–æ–∫ " + threadId + ": –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç!");
                    }
                    
                    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
                    BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand.PoolStats stats = pool.getStats();
                    System.out.printf("üìä –ü–æ—Ç–æ–∫ %d: –µ–º–∫–æ—Å—Ç—å=%d, —Å–≤–æ–±–æ–¥–Ω–æ=%d, –∑–∞–Ω—è—Ç–æ=%d, autoExpansions=%d, totalExpansions=%d%n",
                        threadId, stats.capacity, stats.freeCount, stats.busyCount, stats.autoExpansionHits, stats.totalExpansions);
                    
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } finally {
                    endLatch.countDown();
                }
            });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        System.out.println("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...");
        startLatch.countDown();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        endLatch.await();
        long endTime = System.currentTimeMillis();
        
        executor.shutdown();
        
        // –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand.PoolStats finalStats = pool.getStats();
        
        System.out.println("\n=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        System.out.println("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + (endTime - startTime) + " –º—Å");
        System.out.println("–ù–∞—á–∞–ª—å–Ω–∞—è –µ–º–∫–æ—Å—Ç—å: " + pool.getInitialCapacity());
        System.out.println("–§–∏–Ω–∞–ª—å–Ω–∞—è –µ–º–∫–æ—Å—Ç—å: " + pool.getCapacity());
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: " + finalStats.totalExpansions);
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ auto-expansion: " + finalStats.autoExpansionHits);
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–∏–π: " + finalStats.totalGets);
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: " + finalStats.totalReturns);
        System.out.println("–°–≤–æ–±–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + finalStats.freeCount);
        System.out.println("–ó–∞–Ω—è—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + finalStats.busyCount);
        System.out.println("Hits –ø–æ stack: " + finalStats.stackHits);
        System.out.println("Hits –ø–æ striped tail: " + finalStats.stripedTailHits);
        System.out.println("Hits –ø–æ bit tricks: " + finalStats.bitTrickHits);
        System.out.println("–ù–∞—à–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–æ: " + totalObjectsCreated.get() + ", –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: " + totalObjectsReturned.get());
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, —á—Ç–æ –ø—É–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è
        if (finalStats.totalExpansions > 0) {
            System.out.println("\nüéâ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!");
            System.out.println("üéâ –ü—É–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è —Å " + pool.getInitialCapacity() + 
                             " –¥–æ " + pool.getCapacity() + " –æ–±—ä–µ–∫—Ç–æ–≤!");
            System.out.println("üéâ Auto-expansion —Å—Ä–∞–±–æ—Ç–∞–ª " + finalStats.autoExpansionHits + " —Ä–∞–∑");
            System.out.println("üéâ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: " + finalStats.totalExpansions);
        } else {
            System.out.println("\nü§î –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ï –í–´–ó–í–ê–õ –†–ê–°–®–ò–†–ï–ù–ò–Ø");
            System.out.println("ü§î –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—É–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –ù–ï–í–ï–†–û–Ø–¢–ù–û —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!");
            System.out.println("ü§î –í—Å–µ –ø–æ—Ç–æ–∫–∏ —É—Å–ø–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è");
            System.out.println("ü§î –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –µ—â–µ –±–æ–ª—å—à–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏...");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—É–ª–∞
        System.out.println("\n=== –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò ===");
        System.out.println("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã: " + (finalStats.freeCount == pool.getCapacity()));
        System.out.println("–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + (finalStats.busyCount == 0));
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–∏–π = –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: " + (finalStats.totalGets == finalStats.totalReturns));
        
        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        pool.cleanup();
        
        System.out.println("\n=== –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===");
    }
} 