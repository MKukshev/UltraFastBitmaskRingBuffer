package com.ultrafast.pool;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª—è BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—É–ª–∞
 */
public class BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpandStressTest {
    
    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    static class TestObject {
        private final int id;
        private final long creationTime;
        private volatile boolean inUse = false;
        
        public TestObject(int id) {
            this.id = id;
            this.creationTime = System.nanoTime();
        }
        
        public int getId() {
            return id;
        }
        
        public long getCreationTime() {
            return creationTime;
        }
        
        public boolean isInUse() {
            return inUse;
        }
        
        public void setInUse(boolean inUse) {
            this.inUse = inUse;
        }
        
        @Override
        public String toString() {
            return "TestObject{id=" + id + ", creationTime=" + creationTime + ", inUse=" + inUse + "}";
        }
    }
    
    public static void main(String[] args) throws InterruptedException {
        System.out.println("=== –°–¢–†–ï–°–°-–¢–ï–°–¢ Auto-Expanding Pool ===");
        
        // –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π –µ–º–∫–æ—Å—Ç—å—é
        int initialCapacity = 5;
        AtomicInteger objectCounter = new AtomicInteger(0);
        
        BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand<TestObject> pool = 
            new BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand<>(
                initialCapacity, 
                () -> new TestObject(objectCounter.incrementAndGet())
            );
        
        System.out.println("–ù–∞—á–∞–ª—å–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –ø—É–ª–∞: " + pool.getInitialCapacity());
        System.out.println("–¢–µ–∫—É—â–∞—è –µ–º–∫–æ—Å—Ç—å –ø—É–ª–∞: " + pool.getCapacity());
        
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–ª
        int threadCount = 50; // –ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤
        int operationsPerThread = 200; // –ú–µ–Ω—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–π, –Ω–æ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        CountDownLatch latch = new CountDownLatch(threadCount);
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        AtomicLong totalObjectsCreated = new AtomicLong(0);
        AtomicLong totalObjectsReturned = new AtomicLong(0);
        AtomicLong expansionEvents = new AtomicLong(0);
        
        System.out.println("\n–ó–∞–ø—É—Å–∫–∞–µ–º " + threadCount + " –ø–æ—Ç–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π –≤—ã–ø–æ–ª–Ω–∏—Ç " + operationsPerThread + " –æ–ø–µ—Ä–∞—Ü–∏–π...");
        System.out.println("–û–∂–∏–¥–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—É–ª–∞...");
        
        long startTime = System.currentTimeMillis();
        
        for (int i = 0; i < threadCount; i++) {
            final int threadId = i;
            executor.submit(() -> {
                try {
                    for (int j = 0; j < operationsPerThread; j++) {
                        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞
                        TestObject obj = pool.getFreeObject();
                        
                        if (obj != null) {
                            obj.setInUse(true);
                            totalObjectsCreated.incrementAndGet();
                            
                            // –ò–º–∏—Ç–∏—Ä—É–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å –æ–±—ä–µ–∫—Ç–æ–º
                            // –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –±–æ–ª—å—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                            Thread.sleep(5 + (j % 10)); // 5-15 –º—Å
                            
                            obj.setInUse(false);
                            pool.setFreeObject(obj);
                            totalObjectsReturned.incrementAndGet();
                        } else {
                            System.err.println("–ü–æ—Ç–æ–∫ " + threadId + ": –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç!");
                        }
                        
                        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        if (j % 50 == 0) {
                            BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand.PoolStats stats = pool.getStats();
                            long currentExpansions = stats.totalExpansions;
                            if (currentExpansions > expansionEvents.get()) {
                                expansionEvents.set(currentExpansions);
                                System.out.printf("üî• –†–ê–°–®–ò–†–ï–ù–ò–ï! –ü–æ—Ç–æ–∫ %d, –æ–ø–µ—Ä–∞—Ü–∏—è %d: –µ–º–∫–æ—Å—Ç—å=%d, —Å–≤–æ–±–æ–¥–Ω–æ=%d, –∑–∞–Ω—è—Ç–æ=%d, autoExpansions=%d%n",
                                    threadId, j, stats.capacity, stats.freeCount, stats.busyCount, stats.autoExpansionHits);
                            } else {
                                System.out.printf("–ü–æ—Ç–æ–∫ %d, –æ–ø–µ—Ä–∞—Ü–∏—è %d: –µ–º–∫–æ—Å—Ç—å=%d, —Å–≤–æ–±–æ–¥–Ω–æ=%d, –∑–∞–Ω—è—Ç–æ=%d, autoExpansions=%d%n",
                                    threadId, j, stats.capacity, stats.freeCount, stats.busyCount, stats.autoExpansionHits);
                            }
                        }
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } finally {
                    latch.countDown();
                }
            });
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        latch.await();
        long endTime = System.currentTimeMillis();
        
        executor.shutdown();
        
        // –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        BitmaskRingBufferUltraVarHandleStripedOffHeapAutoExpand.PoolStats finalStats = pool.getStats();
        
        System.out.println("\n=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        System.out.println("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " + (endTime - startTime) + " –º—Å");
        System.out.println("–ù–∞—á–∞–ª—å–Ω–∞—è –µ–º–∫–æ—Å—Ç—å: " + pool.getInitialCapacity());
        System.out.println("–§–∏–Ω–∞–ª—å–Ω–∞—è –µ–º–∫–æ—Å—Ç—å: " + pool.getCapacity());
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: " + finalStats.totalExpansions);
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ auto-expansion: " + finalStats.autoExpansionHits);
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–∏–π: " + finalStats.totalGets);
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: " + finalStats.totalReturns);
        System.out.println("–°–≤–æ–±–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + finalStats.freeCount);
        System.out.println("–ó–∞–Ω—è—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + finalStats.busyCount);
        System.out.println("Hits –ø–æ stack: " + finalStats.stackHits);
        System.out.println("Hits –ø–æ striped tail: " + finalStats.stripedTailHits);
        System.out.println("Hits –ø–æ bit tricks: " + finalStats.bitTrickHits);
        System.out.println("–ù–∞—à–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–æ: " + totalObjectsCreated.get() + ", –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: " + totalObjectsReturned.get());
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, —á—Ç–æ –ø—É–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è
        if (finalStats.totalExpansions > 0) {
            System.out.println("\n‚úÖ –°–¢–†–ï–°–°-–¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!");
            System.out.println("‚úÖ –ü—É–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è —Å " + pool.getInitialCapacity() + 
                             " –¥–æ " + pool.getCapacity() + " –æ–±—ä–µ–∫—Ç–æ–≤!");
            System.out.println("‚úÖ Auto-expansion —Å—Ä–∞–±–æ—Ç–∞–ª " + finalStats.autoExpansionHits + " —Ä–∞–∑");
            System.out.println("‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: " + finalStats.totalExpansions);
        } else {
            System.out.println("\n‚ö†Ô∏è –°–¢–†–ï–°–°-–¢–ï–°–¢ –ù–ï –í–´–ó–í–ê–õ –†–ê–°–®–ò–†–ï–ù–ò–Ø");
            System.out.println("‚ÑπÔ∏è –ü—É–ª –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—É–ª–∞
        System.out.println("\n=== –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò ===");
        System.out.println("–í—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã: " + (finalStats.freeCount == pool.getCapacity()));
        System.out.println("–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + (finalStats.busyCount == 0));
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–∏–π = –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: " + (finalStats.totalGets == finalStats.totalReturns));
        
        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        pool.cleanup();
        
        System.out.println("\n=== –°–¢–†–ï–°–°-–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===");
    }
} 